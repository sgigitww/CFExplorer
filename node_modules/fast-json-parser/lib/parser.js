"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const num_parser_1 = require("./num-parser");
const string_parser_1 = require("./string-parser");
const const_parser_1 = require("./const-parser");
const queue_1 = require("./queue");
const util_1 = require("./util");
function isWhitespace(code) {
    return code === 32 /* Whitespace */ || code === 10 /* Lf */ || code === 13 /* Cr */;
}
class Parser {
    constructor() {
        this.numParser = new num_parser_1.NumParser();
        this.constParser = new const_parser_1.ConstParser();
        this.stringParser = new string_parser_1.StringParser();
        this.mode = 0 /* Value */;
        this.stack = new queue_1.Queue(8);
        this.keys = new queue_1.Queue(4);
    }
    init(str, k) {
        this.keys = new queue_1.Queue(4);
        this.mode = 0 /* Value */;
        this.stack = new queue_1.Queue(8);
    }
    static parse(s) {
        var p = new Parser();
        p.init();
        p.push(s);
        return p.value;
    }
    static parseStream(stream) {
        return new Promise((resolve, reject) => {
            let p = new Parser();
            p.init();
            stream.on("data", (data) => p.push(typeof data === "string" ? data : data.toString()));
            stream.on("end", () => resolve(p.value));
            stream.on("error", reject);
        });
    }
    push(str) {
        if (this.mode === 2 /* PrimitiveKey */ || this.mode === 3 /* PrimitiveString */) {
            this.stringParser.switchString(str);
        }
        for (var k = 0; k < str.length; ++k) {
            this.advance(str, k);
        }
    }
    setMode(mode) {
        this.mode = mode;
    }
    advance(str, k) {
        switch (this.mode) {
            case 2 /* PrimitiveKey */:
                this.parsePrimitiveKeyStr(str, k);
                break;
            case 3 /* PrimitiveString */:
                this.parsePrimitiveStr(str, k);
                break;
            case 4 /* PrimitiveNumber */:
                this.parsePrimitiveNum(str, k);
                break;
            case 5 /* PrimitiveOther */:
                this.parsePrimitiveOther(str, k);
                break;
            case 0 /* Value */:
                this.parseValue(str, k);
                break;
            case 7 /* Separator */:
                this.parseSeparator(str, k);
                break;
            case 1 /* Key */:
                this.parseKey(str, k);
                break;
            case 6 /* Colon */:
                this.parseColon(str, k);
                break;
        }
    }
    parseValue(str, k) {
        var code = str.charCodeAt(k);
        if (code === 123 /* LBrace */) {
            this.open({});
            this.setMode(1 /* Key */);
        }
        else if (code === 91 /* LBracket */) {
            this.open([]);
            this.setMode(0 /* Value */);
        }
        else if ((code >= 48 /* Zero */ && code <= 57 /* Nine */) || code === 45 /* Minus */) {
            this.numParser.init(code);
            this.setMode(4 /* PrimitiveNumber */);
        }
        else if (code === 116 /* T */ || code === 102 /* F */ || code === 110 /* N */) {
            this.constParser.init(code);
            this.setMode(5 /* PrimitiveOther */);
        }
        else if (code === 34 /* Quote */) {
            this.stringParser.init(str, k);
            this.setMode(3 /* PrimitiveString */);
        }
        else if (code === 93 /* RBracket */ || code === 125 /* RBrace */) {
            this.close();
        }
        else if (!isWhitespace(code)) {
            throw new Error(util_1.mkErrorMsg(str, k));
        }
    }
    open(arg) {
        if (this.value !== undefined) {
            this.stack.push(this.value);
        }
        this.value = arg;
    }
    close() {
        if (this.stack.length < 1)
            return;
        var stackItem = this.stack.pop();
        if (stackItem instanceof Array) {
            stackItem.push(this.value);
        }
        else {
            var key = this.keys.pop();
            stackItem[key] = this.value;
        }
        this.setMode(7 /* Separator */);
        this.value = stackItem;
    }
    parseKey(str, k) {
        var code = str.charCodeAt(k);
        if (code === 34 /* Quote */) {
            this.stringParser.init(str, k);
            this.setMode(2 /* PrimitiveKey */);
        }
        else if (!(this.value instanceof Array) && code === 125 /* RBrace */) {
            this.close();
        }
        else if (!isWhitespace(code)) {
            throw new Error(util_1.mkErrorMsg(str, k));
        }
    }
    parseColon(str, k) {
        var code = str.charCodeAt(k);
        if (code === 58 /* Colon */) {
            this.setMode(0 /* Value */);
        }
        else if (!isWhitespace(code)) {
            throw new Error(util_1.mkErrorMsg(str, k));
        }
    }
    parseSeparator(str, k) {
        var code = str.charCodeAt(k);
        var isArray = this.value instanceof Array;
        if (code === 44 /* Comma */) {
            this.setMode(isArray ? 0 /* Value */ : 1 /* Key */);
        }
        else if ((isArray && code === 93 /* RBracket */) || (!isArray && code === 125 /* RBrace */)) {
            this.close();
        }
        else if (!isWhitespace(code)) {
            throw new Error(util_1.mkErrorMsg(str, k));
        }
    }
    parsePrimitiveKeyStr(str, k) {
        if (this.stringParser.advance(str, k)) {
            var key = this.stringParser.value();
            this.keys.push(key);
            this.setMode(6 /* Colon */);
            this.parseColon(str, k);
        }
    }
    addToContainer(value) {
        if (this.value instanceof Array) {
            this.value.push(value);
        }
        else {
            var key = this.keys.pop();
            this.value[key] = value;
        }
    }
    parsePrimitiveStr(str, k) {
        if (this.stringParser.advance(str, k)) {
            this.addToContainer(this.stringParser.value());
            this.setMode(7 /* Separator */);
            this.parseSeparator(str, k);
        }
    }
    parsePrimitiveNum(str, k) {
        if (this.numParser.advance(str, k)) {
            this.addToContainer(this.numParser.value());
            this.setMode(7 /* Separator */);
            this.parseSeparator(str, k);
        }
    }
    parsePrimitiveOther(str, k) {
        if (this.constParser.advance(str, k)) {
            this.addToContainer(this.constParser.value());
            this.setMode(7 /* Separator */);
            this.parseSeparator(str, k);
        }
    }
}
exports.Parser = Parser;
//# sourceMappingURL=parser.js.map